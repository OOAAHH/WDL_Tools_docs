{"content":"<h3 id=\"引言\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#引言\"><span>引言</span></a></h3>\n<blockquote>\n<p>通过几个例子展示了用GPT敲代码的几个模式。</p>\n</blockquote>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\" data-title=\"txt\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes light-plus aurora-x vp-code\" v-pre=\"\"><code><span class=\"line\"><span>**工程控制论正在推动电子计算机技术革命的深入。这样一个现实已经来到了人类面前:由电子计算机和机器智能装备起来的人,已经成为更有作为、更高超的人!** </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>钱学森 《工程控制论》</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><pre><code>    GPT在现代编程中的角色\n    结合工程与哲学的重要性\n文档目的\n    展示如何通过结构化编程提升代码可读性和效率\n    探讨创造性思维在编程过程中的应用\n</code></pre>\n<p>第一部分：分享经验</p>\n<pre><code>个人经历\n    使用GPT进行编程的初衷与动机\n    结构化编程方法的引入\n经验总结\n    保持代码可读性的关键因素\n    结构化方法在实际项目中的应用效果\n</code></pre>\n<p>第二部分：结构化编程与GPT的协同</p>\n<pre><code>结构化编程的重要性\n    代码可读性与可维护性的关系\n    函数式编程的优势\n应对长代码的挑战\n    GPT处理超长代码的局限性\n    通过结构化方法提升代码管理效率\n并行化结构的引入\n    提高编程效率的方法\n    并行化在大型项目中的应用案例\nGPT作为协作伙伴\n    将GPT视为乙方的合作模式\n    规划里程碑与产品功能点的策略\n版本演进的区别\n    GPT3.5、Copilot、GPT4与o1-preview的对比\n    GPT作为放大器与辅助工具的定位\n</code></pre>\n<p>第三部分：任务设计与实现</p>\n<pre><code>任务启动\n    示例任务描述：“我有一个XXX任务，我应该如何设计实现。”\nGPT的响应结构\n    项目整体结构的建议\n    主要功能的实现方法\n    功能验证的步骤\n    错误处理机制\n技术选型\n    如何根据项目需求选择合适的技术栈\n最小可交付产品（MVP）的验证\n    MVP的重要性与实施步骤\n    使用NW系列代码的具体示例\n</code></pre>\n<p>第四部分：保持与GPT的理解一致</p>\n<pre><code>共同理解问题\n    确保人类与GPT对问题有相同的认知\n案例分析\n    NW算法的技术分支选择\n    GPT选择启发式算法的合理性与用户需求的差异\n</code></pre>\n<p>第五部分：思想的边疆</p>\n<pre><code>四象限图解析\n    程序、编程系统、编程产品、编程系统产品的关系\n完整产品的构建\n    定义完整产品的标准\n    GPT在扩展思维与能力边界中的作用\n思想的核心地位\n    人类思维在编程与产品开发中的重要性\n</code></pre>\n<p>第六部分：创造性冲动与编程</p>\n<pre><code>内心渴望与创造冲动\n    创作冲动的本质与转化\n罗素的冲动理论\n    占有型冲动与创造型冲动的区别\n    分享与奉献驱动的创造型冲动的优势\n冲动的社会意义\n    冲动在社会中的良性疏导\n    冲动与理性的平衡\n</code></pre>\n<p>第七部分：工程与哲学的融合</p>\n<pre><code>哲学思想在编程中的体现\n    创造性思维如何影响编程实践\n保持创造能量的方法\n    在技术工作中维持创作冲动的策略\n实际案例\n    工程项目中哲学思想的具体应用实例\n</code></pre>\n<p>结论</p>\n<pre><code>关键要点总结\n    结构化编程与GPT协同的优势\n    创造性思维在编程中的重要性\n未来展望\n    GPT辅助编程的发展方向\n    工程与哲学融合的潜在前景\n</code></pre>\n<p>附录</p>\n<pre><code>示例代码\n    使用NW系列代码的详细示例\n参考文献\n    相关书籍与论文列表\n术语解释\n    文中涉及的专业术语定义\n</code></pre>\n","env":{"base":"/WDL_Tools_docs/","filePath":"/Users/hughes/docs/WDL_Tools_docs/docs/notes/04_codeStyle/meandAI.md","filePathRelative":"notes/04_codeStyle/meandAI.md","frontmatter":{"title":"人工智能协助代码开发","createTime":"2024/11/07 14:45:46","permalink":"/04_codeStyle/meandAI/"},"sfcBlocks":{"template":{"type":"template","content":"<template><h3 id=\"引言\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#引言\"><span>引言</span></a></h3>\n<blockquote>\n<p>通过几个例子展示了用GPT敲代码的几个模式。</p>\n</blockquote>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\" data-title=\"txt\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes light-plus aurora-x vp-code\" v-pre=\"\"><code><span class=\"line\"><span>**工程控制论正在推动电子计算机技术革命的深入。这样一个现实已经来到了人类面前:由电子计算机和机器智能装备起来的人,已经成为更有作为、更高超的人!** </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>钱学森 《工程控制论》</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><pre><code>    GPT在现代编程中的角色\n    结合工程与哲学的重要性\n文档目的\n    展示如何通过结构化编程提升代码可读性和效率\n    探讨创造性思维在编程过程中的应用\n</code></pre>\n<p>第一部分：分享经验</p>\n<pre><code>个人经历\n    使用GPT进行编程的初衷与动机\n    结构化编程方法的引入\n经验总结\n    保持代码可读性的关键因素\n    结构化方法在实际项目中的应用效果\n</code></pre>\n<p>第二部分：结构化编程与GPT的协同</p>\n<pre><code>结构化编程的重要性\n    代码可读性与可维护性的关系\n    函数式编程的优势\n应对长代码的挑战\n    GPT处理超长代码的局限性\n    通过结构化方法提升代码管理效率\n并行化结构的引入\n    提高编程效率的方法\n    并行化在大型项目中的应用案例\nGPT作为协作伙伴\n    将GPT视为乙方的合作模式\n    规划里程碑与产品功能点的策略\n版本演进的区别\n    GPT3.5、Copilot、GPT4与o1-preview的对比\n    GPT作为放大器与辅助工具的定位\n</code></pre>\n<p>第三部分：任务设计与实现</p>\n<pre><code>任务启动\n    示例任务描述：“我有一个XXX任务，我应该如何设计实现。”\nGPT的响应结构\n    项目整体结构的建议\n    主要功能的实现方法\n    功能验证的步骤\n    错误处理机制\n技术选型\n    如何根据项目需求选择合适的技术栈\n最小可交付产品（MVP）的验证\n    MVP的重要性与实施步骤\n    使用NW系列代码的具体示例\n</code></pre>\n<p>第四部分：保持与GPT的理解一致</p>\n<pre><code>共同理解问题\n    确保人类与GPT对问题有相同的认知\n案例分析\n    NW算法的技术分支选择\n    GPT选择启发式算法的合理性与用户需求的差异\n</code></pre>\n<p>第五部分：思想的边疆</p>\n<pre><code>四象限图解析\n    程序、编程系统、编程产品、编程系统产品的关系\n完整产品的构建\n    定义完整产品的标准\n    GPT在扩展思维与能力边界中的作用\n思想的核心地位\n    人类思维在编程与产品开发中的重要性\n</code></pre>\n<p>第六部分：创造性冲动与编程</p>\n<pre><code>内心渴望与创造冲动\n    创作冲动的本质与转化\n罗素的冲动理论\n    占有型冲动与创造型冲动的区别\n    分享与奉献驱动的创造型冲动的优势\n冲动的社会意义\n    冲动在社会中的良性疏导\n    冲动与理性的平衡\n</code></pre>\n<p>第七部分：工程与哲学的融合</p>\n<pre><code>哲学思想在编程中的体现\n    创造性思维如何影响编程实践\n保持创造能量的方法\n    在技术工作中维持创作冲动的策略\n实际案例\n    工程项目中哲学思想的具体应用实例\n</code></pre>\n<p>结论</p>\n<pre><code>关键要点总结\n    结构化编程与GPT协同的优势\n    创造性思维在编程中的重要性\n未来展望\n    GPT辅助编程的发展方向\n    工程与哲学融合的潜在前景\n</code></pre>\n<p>附录</p>\n<pre><code>示例代码\n    使用NW系列代码的详细示例\n参考文献\n    相关书籍与论文列表\n术语解释\n    文中涉及的专业术语定义\n</code></pre>\n</template>","contentStripped":"<h3 id=\"引言\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#引言\"><span>引言</span></a></h3>\n<blockquote>\n<p>通过几个例子展示了用GPT敲代码的几个模式。</p>\n</blockquote>\n<div class=\"language-txt line-numbers-mode\" data-ext=\"txt\" data-title=\"txt\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes light-plus aurora-x vp-code\" v-pre=\"\"><code><span class=\"line\"><span>**工程控制论正在推动电子计算机技术革命的深入。这样一个现实已经来到了人类面前:由电子计算机和机器智能装备起来的人,已经成为更有作为、更高超的人!** </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>钱学森 《工程控制论》</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><pre><code>    GPT在现代编程中的角色\n    结合工程与哲学的重要性\n文档目的\n    展示如何通过结构化编程提升代码可读性和效率\n    探讨创造性思维在编程过程中的应用\n</code></pre>\n<p>第一部分：分享经验</p>\n<pre><code>个人经历\n    使用GPT进行编程的初衷与动机\n    结构化编程方法的引入\n经验总结\n    保持代码可读性的关键因素\n    结构化方法在实际项目中的应用效果\n</code></pre>\n<p>第二部分：结构化编程与GPT的协同</p>\n<pre><code>结构化编程的重要性\n    代码可读性与可维护性的关系\n    函数式编程的优势\n应对长代码的挑战\n    GPT处理超长代码的局限性\n    通过结构化方法提升代码管理效率\n并行化结构的引入\n    提高编程效率的方法\n    并行化在大型项目中的应用案例\nGPT作为协作伙伴\n    将GPT视为乙方的合作模式\n    规划里程碑与产品功能点的策略\n版本演进的区别\n    GPT3.5、Copilot、GPT4与o1-preview的对比\n    GPT作为放大器与辅助工具的定位\n</code></pre>\n<p>第三部分：任务设计与实现</p>\n<pre><code>任务启动\n    示例任务描述：“我有一个XXX任务，我应该如何设计实现。”\nGPT的响应结构\n    项目整体结构的建议\n    主要功能的实现方法\n    功能验证的步骤\n    错误处理机制\n技术选型\n    如何根据项目需求选择合适的技术栈\n最小可交付产品（MVP）的验证\n    MVP的重要性与实施步骤\n    使用NW系列代码的具体示例\n</code></pre>\n<p>第四部分：保持与GPT的理解一致</p>\n<pre><code>共同理解问题\n    确保人类与GPT对问题有相同的认知\n案例分析\n    NW算法的技术分支选择\n    GPT选择启发式算法的合理性与用户需求的差异\n</code></pre>\n<p>第五部分：思想的边疆</p>\n<pre><code>四象限图解析\n    程序、编程系统、编程产品、编程系统产品的关系\n完整产品的构建\n    定义完整产品的标准\n    GPT在扩展思维与能力边界中的作用\n思想的核心地位\n    人类思维在编程与产品开发中的重要性\n</code></pre>\n<p>第六部分：创造性冲动与编程</p>\n<pre><code>内心渴望与创造冲动\n    创作冲动的本质与转化\n罗素的冲动理论\n    占有型冲动与创造型冲动的区别\n    分享与奉献驱动的创造型冲动的优势\n冲动的社会意义\n    冲动在社会中的良性疏导\n    冲动与理性的平衡\n</code></pre>\n<p>第七部分：工程与哲学的融合</p>\n<pre><code>哲学思想在编程中的体现\n    创造性思维如何影响编程实践\n保持创造能量的方法\n    在技术工作中维持创作冲动的策略\n实际案例\n    工程项目中哲学思想的具体应用实例\n</code></pre>\n<p>结论</p>\n<pre><code>关键要点总结\n    结构化编程与GPT协同的优势\n    创造性思维在编程中的重要性\n未来展望\n    GPT辅助编程的发展方向\n    工程与哲学融合的潜在前景\n</code></pre>\n<p>附录</p>\n<pre><code>示例代码\n    使用NW系列代码的详细示例\n参考文献\n    相关书籍与论文列表\n术语解释\n    文中涉及的专业术语定义\n</code></pre>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"### 引言\n> 通过几个例子展示了用GPT敲代码的几个模式。\n\n``` txt\n**工程控制论正在推动电子计算机技术革命的深入。这样一个现实已经来到了人类面前:由电子计算机和机器智能装备起来的人,已经成为更有作为、更高超的人!** \n\n钱学森 《工程控制论》\n```\n\n        GPT在现代编程中的角色\n        结合工程与哲学的重要性\n    文档目的\n        展示如何通过结构化编程提升代码可读性和效率\n        探讨创造性思维在编程过程中的应用\n\n第一部分：分享经验\n\n    个人经历\n        使用GPT进行编程的初衷与动机\n        结构化编程方法的引入\n    经验总结\n        保持代码可读性的关键因素\n        结构化方法在实际项目中的应用效果\n\n第二部分：结构化编程与GPT的协同\n\n    结构化编程的重要性\n        代码可读性与可维护性的关系\n        函数式编程的优势\n    应对长代码的挑战\n        GPT处理超长代码的局限性\n        通过结构化方法提升代码管理效率\n    并行化结构的引入\n        提高编程效率的方法\n        并行化在大型项目中的应用案例\n    GPT作为协作伙伴\n        将GPT视为乙方的合作模式\n        规划里程碑与产品功能点的策略\n    版本演进的区别\n        GPT3.5、Copilot、GPT4与o1-preview的对比\n        GPT作为放大器与辅助工具的定位\n\n第三部分：任务设计与实现\n\n    任务启动\n        示例任务描述：“我有一个XXX任务，我应该如何设计实现。”\n    GPT的响应结构\n        项目整体结构的建议\n        主要功能的实现方法\n        功能验证的步骤\n        错误处理机制\n    技术选型\n        如何根据项目需求选择合适的技术栈\n    最小可交付产品（MVP）的验证\n        MVP的重要性与实施步骤\n        使用NW系列代码的具体示例\n\n第四部分：保持与GPT的理解一致\n\n    共同理解问题\n        确保人类与GPT对问题有相同的认知\n    案例分析\n        NW算法的技术分支选择\n        GPT选择启发式算法的合理性与用户需求的差异\n\n第五部分：思想的边疆\n\n    四象限图解析\n        程序、编程系统、编程产品、编程系统产品的关系\n    完整产品的构建\n        定义完整产品的标准\n        GPT在扩展思维与能力边界中的作用\n    思想的核心地位\n        人类思维在编程与产品开发中的重要性\n\n第六部分：创造性冲动与编程\n\n    内心渴望与创造冲动\n        创作冲动的本质与转化\n    罗素的冲动理论\n        占有型冲动与创造型冲动的区别\n        分享与奉献驱动的创造型冲动的优势\n    冲动的社会意义\n        冲动在社会中的良性疏导\n        冲动与理性的平衡\n\n第七部分：工程与哲学的融合\n\n    哲学思想在编程中的体现\n        创造性思维如何影响编程实践\n    保持创造能量的方法\n        在技术工作中维持创作冲动的策略\n    实际案例\n        工程项目中哲学思想的具体应用实例\n\n结论\n\n    关键要点总结\n        结构化编程与GPT协同的优势\n        创造性思维在编程中的重要性\n    未来展望\n        GPT辅助编程的发展方向\n        工程与哲学融合的潜在前景\n\n附录\n\n    示例代码\n        使用NW系列代码的详细示例\n    参考文献\n        相关书籍与论文列表\n    术语解释\n        文中涉及的专业术语定义","excerpt":"","includedFiles":[],"tasklists":0,"title":"","headers":[{"level":3,"title":"引言","slug":"引言","link":"#引言","children":[]}]}}
